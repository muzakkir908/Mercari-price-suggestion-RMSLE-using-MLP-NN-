{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "new.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "LKP-0X6Qc2dg",
        "colab_type": "code",
        "outputId": "da821b4d-a2cc-4c80-b6fb-201d786e1af0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        }
      },
      "source": [
        "# importing libraries\n",
        "import os\n",
        "import re\n",
        "import time\n",
        "import math\n",
        "import nltk\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "sns.set_style('whitegrid')\n",
        "\n",
        "\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.linear_model import SGDRegressor, Ridge\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "from scipy.sparse import hstack\n",
        "from scipy import sparse\n",
        "from scipy.sparse import csr_matrix\n",
        "\n",
        "from tqdm import tqdm\n",
        "from nltk.corpus import stopwords\n",
        "from prettytable import PrettyTable\n",
        "from lightgbm import LGBMRegressor\n",
        "\n",
        "import xgboost as xgb\n",
        "\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n",
        "from tensorflow.keras.optimizers import RMSprop, Adam"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.metrics.classification module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.metrics. Anything that cannot be imported from sklearn.metrics is now part of the private API.\n",
            "  warnings.warn(message, FutureWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pRb6LqM2c6ox",
        "colab_type": "code",
        "outputId": "bf77c248-58eb-49b3-db33-4f8169aec256",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# loading train\n",
        "train = pd.read_csv('/content/drive/My Drive/Mercari/data/train.tsv', sep='\\t')\n",
        "train.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1482535, 8)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-gzci4Tpc6x2",
        "colab_type": "code",
        "outputId": "c65dd4ef-a8e3-433a-ce24-790123de5771",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        }
      },
      "source": [
        "train.head(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_id</th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>price</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>MLB Cincinnati Reds T Shirt Size XL</td>\n",
              "      <td>3</td>\n",
              "      <td>Men/Tops/T-shirts</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>No description yet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Razer BlackWidow Chroma Keyboard</td>\n",
              "      <td>3</td>\n",
              "      <td>Electronics/Computers &amp; Tablets/Components &amp; P...</td>\n",
              "      <td>Razer</td>\n",
              "      <td>52.0</td>\n",
              "      <td>0</td>\n",
              "      <td>This keyboard is in great condition and works ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>AVA-VIV Blouse</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Tops &amp; Blouses/Blouse</td>\n",
              "      <td>Target</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Adorable top with a hint of lace and a key hol...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Leather Horse Statues</td>\n",
              "      <td>1</td>\n",
              "      <td>Home/Home Décor/Home Décor Accents</td>\n",
              "      <td>NaN</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>New with tags. Leather horses. Retail for [rm]...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>24K GOLD plated rose</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Necklaces</td>\n",
              "      <td>NaN</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Complete with certificate of authenticity</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   train_id  ...                                   item_description\n",
              "0         0  ...                                 No description yet\n",
              "1         1  ...  This keyboard is in great condition and works ...\n",
              "2         2  ...  Adorable top with a hint of lace and a key hol...\n",
              "3         3  ...  New with tags. Leather horses. Retail for [rm]...\n",
              "4         4  ...          Complete with certificate of authenticity\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w8GU-4Ybc61c",
        "colab_type": "code",
        "outputId": "754f5c28-1a4e-4822-807d-82b70acc91c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "train.dtypes"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "train_id               int64\n",
              "name                  object\n",
              "item_condition_id      int64\n",
              "category_name         object\n",
              "brand_name            object\n",
              "price                float64\n",
              "shipping               int64\n",
              "item_description      object\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jSA5sP5-c65n",
        "colab_type": "code",
        "outputId": "c3d7b713-227f-42ab-99a9-fcaba98cd625",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "train.describe()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_id</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>price</th>\n",
              "      <th>shipping</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.482535e+06</td>\n",
              "      <td>1.482535e+06</td>\n",
              "      <td>1.482535e+06</td>\n",
              "      <td>1.482535e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.412670e+05</td>\n",
              "      <td>1.907380e+00</td>\n",
              "      <td>2.673752e+01</td>\n",
              "      <td>4.472744e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.279711e+05</td>\n",
              "      <td>9.031586e-01</td>\n",
              "      <td>3.858607e+01</td>\n",
              "      <td>4.972124e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>3.706335e+05</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.412670e+05</td>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>1.700000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.111900e+06</td>\n",
              "      <td>3.000000e+00</td>\n",
              "      <td>2.900000e+01</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.482534e+06</td>\n",
              "      <td>5.000000e+00</td>\n",
              "      <td>2.009000e+03</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           train_id  item_condition_id         price      shipping\n",
              "count  1.482535e+06       1.482535e+06  1.482535e+06  1.482535e+06\n",
              "mean   7.412670e+05       1.907380e+00  2.673752e+01  4.472744e-01\n",
              "std    4.279711e+05       9.031586e-01  3.858607e+01  4.972124e-01\n",
              "min    0.000000e+00       1.000000e+00  0.000000e+00  0.000000e+00\n",
              "25%    3.706335e+05       1.000000e+00  1.000000e+01  0.000000e+00\n",
              "50%    7.412670e+05       2.000000e+00  1.700000e+01  0.000000e+00\n",
              "75%    1.111900e+06       3.000000e+00  2.900000e+01  1.000000e+00\n",
              "max    1.482534e+06       5.000000e+00  2.009000e+03  1.000000e+00"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gs2_nhESc673",
        "colab_type": "code",
        "outputId": "bfa1fe61-f615-4f5b-904c-6a8464b6018d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        }
      },
      "source": [
        "train.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1482535 entries, 0 to 1482534\n",
            "Data columns (total 8 columns):\n",
            " #   Column             Non-Null Count    Dtype  \n",
            "---  ------             --------------    -----  \n",
            " 0   train_id           1482535 non-null  int64  \n",
            " 1   name               1482535 non-null  object \n",
            " 2   item_condition_id  1482535 non-null  int64  \n",
            " 3   category_name      1476208 non-null  object \n",
            " 4   brand_name         849853 non-null   object \n",
            " 5   price              1482535 non-null  float64\n",
            " 6   shipping           1482535 non-null  int64  \n",
            " 7   item_description   1482531 non-null  object \n",
            "dtypes: float64(1), int64(3), object(4)\n",
            "memory usage: 90.5+ MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8kmo5vOAc6_2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rpEjtvU2c7JS",
        "colab_type": "code",
        "outputId": "f5cb985a-a3df-4be0-ba68-1275ad7931db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# loading test\n",
        "test = pd.read_csv('/content/drive/My Drive/Mercari/data/test.tsv', sep='\\t')\n",
        "test.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(693359, 7)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uIZKD-dSc7NC",
        "colab_type": "code",
        "outputId": "430cfd1f-0e62-48ff-dbb8-6d97e5fb2b23",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        }
      },
      "source": [
        "test.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>test_id</th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Breast cancer \"I fight like a girl\" ring</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Rings</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>Size 7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>25 pcs NEW 7.5\"x12\" Kraft Bubble Mailers</td>\n",
              "      <td>1</td>\n",
              "      <td>Other/Office supplies/Shipping Supplies</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>25 pcs NEW 7.5\"x12\" Kraft Bubble Mailers Lined...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Coach bag</td>\n",
              "      <td>1</td>\n",
              "      <td>Vintage &amp; Collectibles/Bags and Purses/Handbag</td>\n",
              "      <td>Coach</td>\n",
              "      <td>1</td>\n",
              "      <td>Brand new coach bag. Bought for [rm] at a Coac...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Floral Kimono</td>\n",
              "      <td>2</td>\n",
              "      <td>Women/Sweaters/Cardigan</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>-floral kimono -never worn -lightweight and pe...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Life after Death</td>\n",
              "      <td>3</td>\n",
              "      <td>Other/Books/Religion &amp; Spirituality</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>Rediscovering life after the loss of a loved o...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   test_id  ...                                   item_description\n",
              "0        0  ...                                             Size 7\n",
              "1        1  ...  25 pcs NEW 7.5\"x12\" Kraft Bubble Mailers Lined...\n",
              "2        2  ...  Brand new coach bag. Bought for [rm] at a Coac...\n",
              "3        3  ...  -floral kimono -never worn -lightweight and pe...\n",
              "4        4  ...  Rediscovering life after the loss of a loved o...\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NUp92kxSc7Sd",
        "colab_type": "code",
        "outputId": "99f81965-9273-4257-a572-56dd04cccd7c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "test.dtypes"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "test_id               int64\n",
              "name                 object\n",
              "item_condition_id     int64\n",
              "category_name        object\n",
              "brand_name           object\n",
              "shipping              int64\n",
              "item_description     object\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rzgHDkxCc7WY",
        "colab_type": "code",
        "outputId": "a26022a2-5f7a-4097-9ae1-479d1c921108",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "test.describe()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>test_id</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>shipping</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>693359.000000</td>\n",
              "      <td>693359.000000</td>\n",
              "      <td>693359.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>346679.000000</td>\n",
              "      <td>1.906102</td>\n",
              "      <td>0.447719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>200155.646984</td>\n",
              "      <td>0.903378</td>\n",
              "      <td>0.497260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>173339.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>346679.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>520018.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>693358.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             test_id  item_condition_id       shipping\n",
              "count  693359.000000      693359.000000  693359.000000\n",
              "mean   346679.000000           1.906102       0.447719\n",
              "std    200155.646984           0.903378       0.497260\n",
              "min         0.000000           1.000000       0.000000\n",
              "25%    173339.500000           1.000000       0.000000\n",
              "50%    346679.000000           2.000000       0.000000\n",
              "75%    520018.500000           3.000000       1.000000\n",
              "max    693358.000000           5.000000       1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DPX3bmgbc7gq",
        "colab_type": "code",
        "outputId": "6ee08d52-1ff8-4bdc-a63c-ab5cb67eac4b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        }
      },
      "source": [
        "test.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 693359 entries, 0 to 693358\n",
            "Data columns (total 7 columns):\n",
            " #   Column             Non-Null Count   Dtype \n",
            "---  ------             --------------   ----- \n",
            " 0   test_id            693359 non-null  int64 \n",
            " 1   name               693359 non-null  object\n",
            " 2   item_condition_id  693359 non-null  int64 \n",
            " 3   category_name      690301 non-null  object\n",
            " 4   brand_name         397834 non-null  object\n",
            " 5   shipping           693359 non-null  int64 \n",
            " 6   item_description   693359 non-null  object\n",
            "dtypes: int64(3), object(4)\n",
            "memory usage: 37.0+ MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IC0CvJeUc7kx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tk8gAdBGfShc",
        "colab_type": "text"
      },
      "source": [
        "# Checking for Null Values"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gv7Ou57Zc7o8",
        "colab_type": "code",
        "outputId": "907773fa-4ce7-4802-91fd-eade7cc71c97",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "train.isnull().any()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "train_id             False\n",
              "name                 False\n",
              "item_condition_id    False\n",
              "category_name         True\n",
              "brand_name            True\n",
              "price                False\n",
              "shipping             False\n",
              "item_description      True\n",
              "dtype: bool"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e_LR3IpQc7rH",
        "colab_type": "code",
        "outputId": "028dbf96-9686-4691-94f3-7b44b7d36e21",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "test.isnull().any()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "test_id              False\n",
              "name                 False\n",
              "item_condition_id    False\n",
              "category_name         True\n",
              "brand_name            True\n",
              "shipping             False\n",
              "item_description     False\n",
              "dtype: bool"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yZIqDYKKc7xy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i-rvQlGgfxtc",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "## Replacing Null Values"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7oYlp14kc7ur",
        "colab_type": "code",
        "outputId": "6bc1bb88-b13c-4bc2-94f0-73cd80162c0e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "# Train\n",
        "\n",
        "train['category_name'].fillna(\"Others\", inplace=True)\n",
        "train['brand_name'].fillna(\"Unknown\", inplace=True)\n",
        "train['item_description'].fillna(\"No description\", inplace=True)\n",
        "\n",
        "# Checking for Null values\n",
        "train.isnull().any()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "train_id             False\n",
              "name                 False\n",
              "item_condition_id    False\n",
              "category_name        False\n",
              "brand_name           False\n",
              "price                False\n",
              "shipping             False\n",
              "item_description     False\n",
              "dtype: bool"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dz4lTpCBc7jL",
        "colab_type": "code",
        "outputId": "888f4fec-7a3b-405d-980d-3e81f21b2794",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "# Test\n",
        "\n",
        "test['category_name'].fillna(\"Others\", inplace=True)\n",
        "test['brand_name'].fillna(\"Unknown\", inplace=True)\n",
        "#test['item_description'].fillna(\"No description\", inplace=True)\n",
        "\n",
        "# Checking for Null values\n",
        "test.isnull().any()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "test_id              False\n",
              "name                 False\n",
              "item_condition_id    False\n",
              "category_name        False\n",
              "brand_name           False\n",
              "shipping             False\n",
              "item_description     False\n",
              "dtype: bool"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tzSQo1xrc7fk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PulF8pVskAmQ",
        "colab_type": "text"
      },
      "source": [
        "# Data Analysis\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R6rvyOJMkIrg",
        "colab_type": "text"
      },
      "source": [
        "## 1. Price"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NFNTrXVIc7aL",
        "colab_type": "code",
        "outputId": "b505df22-958b-4dee-d9da-6c807fdbc234",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "train['price'].describe()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    1.482535e+06\n",
              "mean     2.673752e+01\n",
              "std      3.858607e+01\n",
              "min      0.000000e+00\n",
              "25%      1.000000e+01\n",
              "50%      1.700000e+01\n",
              "75%      2.900000e+01\n",
              "max      2.009000e+03\n",
              "Name: price, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MLoOG9WPkkc1",
        "colab_type": "code",
        "outputId": "a02480ef-393e-4d9f-ce31-7021fb82b37d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 515
        }
      },
      "source": [
        "#Histogram\n",
        "fig, ax = plt.subplots(figsize=(14,8))\n",
        "ax.hist(train['price'], bins=30, range=[0,200], label=\"Price\")\n",
        "plt.title('Price distribution', fontsize=15)\n",
        "ax.set_xlabel('Price')\n",
        "ax.set_ylabel('No of items')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T6Ilwm4dlofJ",
        "colab_type": "text"
      },
      "source": [
        "We can clearly see that the most of the products price is in between 15 and 30"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wwWCyk6Skki_",
        "colab_type": "code",
        "outputId": "bd34ed38-aec3-46ed-dcba-a4b91e1f938b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        }
      },
      "source": [
        "#We will add log(price) as a column in our train data\n",
        "train[\"Log_Price\"] = np.log1p(train[\"price\"])\n",
        "train.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_id</th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>price</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>Log_Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>MLB Cincinnati Reds T Shirt Size XL</td>\n",
              "      <td>3</td>\n",
              "      <td>Men/Tops/T-shirts</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>No description yet</td>\n",
              "      <td>2.397895</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Razer BlackWidow Chroma Keyboard</td>\n",
              "      <td>3</td>\n",
              "      <td>Electronics/Computers &amp; Tablets/Components &amp; P...</td>\n",
              "      <td>Razer</td>\n",
              "      <td>52.0</td>\n",
              "      <td>0</td>\n",
              "      <td>This keyboard is in great condition and works ...</td>\n",
              "      <td>3.970292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>AVA-VIV Blouse</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Tops &amp; Blouses/Blouse</td>\n",
              "      <td>Target</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Adorable top with a hint of lace and a key hol...</td>\n",
              "      <td>2.397895</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Leather Horse Statues</td>\n",
              "      <td>1</td>\n",
              "      <td>Home/Home Décor/Home Décor Accents</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>New with tags. Leather horses. Retail for [rm]...</td>\n",
              "      <td>3.583519</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>24K GOLD plated rose</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Necklaces</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Complete with certificate of authenticity</td>\n",
              "      <td>3.806662</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   train_id  ... Log_Price\n",
              "0         0  ...  2.397895\n",
              "1         1  ...  3.970292\n",
              "2         2  ...  2.397895\n",
              "3         3  ...  3.583519\n",
              "4         4  ...  3.806662\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "So_gzyhVkkhJ",
        "colab_type": "code",
        "outputId": "2b61e407-370f-4c18-e1c7-989b41dda7af",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 515
        }
      },
      "source": [
        "#Histogram\n",
        "fig, ax = plt.subplots(figsize=(14,8))\n",
        "ax.hist(train['Log_Price'], bins=30, range=[0,7], label=\"Price\")\n",
        "plt.title('Price distribution', fontsize=15)\n",
        "ax.set_xlabel('Price')\n",
        "ax.set_ylabel('No of items')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1008x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m8VRWnIsm8T3",
        "colab_type": "text"
      },
      "source": [
        "## 2. Shipping"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DFVlzl-QkkaM",
        "colab_type": "code",
        "outputId": "88b2342d-a850-43bd-e320-aa6249f921b5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "train['shipping'].value_counts()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    819435\n",
              "1    663100\n",
              "Name: shipping, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tBmDDnkokkWr",
        "colab_type": "code",
        "outputId": "4fc0d425-64d9-43c2-e4ca-2f72472a0307",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "source": [
        "# Shipping vs Price\n",
        "sns.boxplot(x=train['shipping'] ,y=train['price'],orient='v')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f277744bb70>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SptCW_5ukkQe",
        "colab_type": "code",
        "outputId": "51f93b38-308e-49ab-c471-5912106556fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "source": [
        "# Shipping vs Log_Price\n",
        "sns.boxplot(x=train['shipping'] ,y=train['Log_Price'],orient='v')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2777983a90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LKMe7esoxlbf",
        "colab_type": "text"
      },
      "source": [
        "## 3. item_condition_id"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_nOMQntBc7RD",
        "colab_type": "code",
        "outputId": "47656cff-df57-462b-c473-17a942637cad",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "train['item_condition_id'].value_counts()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    640549\n",
              "3    432161\n",
              "2    375479\n",
              "4     31962\n",
              "5      2384\n",
              "Name: item_condition_id, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_MAzY5M6xrfh",
        "colab_type": "code",
        "outputId": "6f98f4c7-4f49-4ce8-9fbc-533405b273a6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        }
      },
      "source": [
        "fig, ax = plt.subplots(figsize=(15,7))\n",
        "sns.countplot(x='item_condition_id', data=train, ax=ax)\n",
        "plt.title('Item count by item_condition_id',fontsize=25)\n",
        "plt.ylabel('No of items',fontsize=25)\n",
        "plt.xlabel('')\n",
        "plt.xticks(rotation=70,fontsize=20)\n",
        "plt.yticks(fontsize=20)\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sBmkDXGXxrYb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tG0fszXKoAb1",
        "colab_type": "text"
      },
      "source": [
        "## 4. category_name\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CoIHjeKKc7La",
        "colab_type": "code",
        "outputId": "92ea4a41-2127-4565-cf09-fa718dc6fb6c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "len(train['category_name'].unique())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1288"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6XCe-msTc7IE",
        "colab_type": "code",
        "outputId": "3dd02adc-3e6a-422b-a26d-9d2c26acfade",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "train['category_name'].value_counts()[:10]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Women/Athletic Apparel/Pants, Tights, Leggings                 60177\n",
              "Women/Tops & Blouses/T-Shirts                                  46380\n",
              "Beauty/Makeup/Face                                             34335\n",
              "Beauty/Makeup/Lips                                             29910\n",
              "Electronics/Video Games & Consoles/Games                       26557\n",
              "Beauty/Makeup/Eyes                                             25215\n",
              "Electronics/Cell Phones & Accessories/Cases, Covers & Skins    24676\n",
              "Women/Underwear/Bras                                           21274\n",
              "Women/Tops & Blouses/Tank, Cami                                20284\n",
              "Women/Tops & Blouses/Blouse                                    20284\n",
              "Name: category_name, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fvbBnv8qo53A",
        "colab_type": "code",
        "outputId": "816379a0-db1d-46cd-cc22-fae4ab408797",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        }
      },
      "source": [
        "train.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_id</th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>price</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>Log_Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>MLB Cincinnati Reds T Shirt Size XL</td>\n",
              "      <td>3</td>\n",
              "      <td>Men/Tops/T-shirts</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>No description yet</td>\n",
              "      <td>2.397895</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Razer BlackWidow Chroma Keyboard</td>\n",
              "      <td>3</td>\n",
              "      <td>Electronics/Computers &amp; Tablets/Components &amp; P...</td>\n",
              "      <td>Razer</td>\n",
              "      <td>52.0</td>\n",
              "      <td>0</td>\n",
              "      <td>This keyboard is in great condition and works ...</td>\n",
              "      <td>3.970292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>AVA-VIV Blouse</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Tops &amp; Blouses/Blouse</td>\n",
              "      <td>Target</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Adorable top with a hint of lace and a key hol...</td>\n",
              "      <td>2.397895</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Leather Horse Statues</td>\n",
              "      <td>1</td>\n",
              "      <td>Home/Home Décor/Home Décor Accents</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>New with tags. Leather horses. Retail for [rm]...</td>\n",
              "      <td>3.583519</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>24K GOLD plated rose</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Necklaces</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Complete with certificate of authenticity</td>\n",
              "      <td>3.806662</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   train_id  ... Log_Price\n",
              "0         0  ...  2.397895\n",
              "1         1  ...  3.970292\n",
              "2         2  ...  2.397895\n",
              "3         3  ...  3.583519\n",
              "4         4  ...  3.806662\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o7j-aGCOc7Db",
        "colab_type": "code",
        "outputId": "2a1d40fb-5dd9-4059-ba3e-dd761b2b5d86",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Train\n",
        "# Splitting categories into 3 features: main_cat, sub_cat_1, sub_cat_2\n",
        "\n",
        "#main_cat, sub_cat_1, sub_cat_2 = train['category_name'].split('/')\n",
        "\n",
        "main_cat = []\n",
        "sub_cat_1 = []\n",
        "sub_cat_2 = []\n",
        "\n",
        "for row in tqdm(train['category_name']):\n",
        "    try:\n",
        "        main, sub_1, sub_2 = row.split('/')\n",
        "        main_cat.append(main)\n",
        "        sub_cat_1.append(sub_1)\n",
        "        sub_cat_2.append(sub_2)\n",
        "    except:\n",
        "        main_cat.append(\"Others\")\n",
        "        sub_cat_1.append(\"Others\")\n",
        "        sub_cat_2.append(\"Others\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 1482535/1482535 [00:01<00:00, 922202.01it/s]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vZ3cxQbMq_3x",
        "colab_type": "code",
        "outputId": "e88168e3-08bd-4a20-d779-8bdd746a996d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "print(len(main_cat))\n",
        "print(len(sub_cat_1))\n",
        "print(len(sub_cat_2))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1482535\n",
            "1482535\n",
            "1482535\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k2uIhaskqNdb",
        "colab_type": "code",
        "outputId": "191847e9-22ff-40c4-9c9e-32d7400bf81b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        }
      },
      "source": [
        "# Adding these new features to the train dataframe\n",
        "train['main_cat'] = main_cat\n",
        "train['sub_cat_1'] = sub_cat_1\n",
        "train['sub_cat_2'] = sub_cat_2\n",
        "\n",
        "train.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_id</th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>price</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>Log_Price</th>\n",
              "      <th>main_cat</th>\n",
              "      <th>sub_cat_1</th>\n",
              "      <th>sub_cat_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>MLB Cincinnati Reds T Shirt Size XL</td>\n",
              "      <td>3</td>\n",
              "      <td>Men/Tops/T-shirts</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>No description yet</td>\n",
              "      <td>2.397895</td>\n",
              "      <td>Men</td>\n",
              "      <td>Tops</td>\n",
              "      <td>T-shirts</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Razer BlackWidow Chroma Keyboard</td>\n",
              "      <td>3</td>\n",
              "      <td>Electronics/Computers &amp; Tablets/Components &amp; P...</td>\n",
              "      <td>Razer</td>\n",
              "      <td>52.0</td>\n",
              "      <td>0</td>\n",
              "      <td>This keyboard is in great condition and works ...</td>\n",
              "      <td>3.970292</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Computers &amp; Tablets</td>\n",
              "      <td>Components &amp; Parts</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>AVA-VIV Blouse</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Tops &amp; Blouses/Blouse</td>\n",
              "      <td>Target</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Adorable top with a hint of lace and a key hol...</td>\n",
              "      <td>2.397895</td>\n",
              "      <td>Women</td>\n",
              "      <td>Tops &amp; Blouses</td>\n",
              "      <td>Blouse</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Leather Horse Statues</td>\n",
              "      <td>1</td>\n",
              "      <td>Home/Home Décor/Home Décor Accents</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>New with tags. Leather horses. Retail for [rm]...</td>\n",
              "      <td>3.583519</td>\n",
              "      <td>Home</td>\n",
              "      <td>Home Décor</td>\n",
              "      <td>Home Décor Accents</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>24K GOLD plated rose</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Necklaces</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Complete with certificate of authenticity</td>\n",
              "      <td>3.806662</td>\n",
              "      <td>Women</td>\n",
              "      <td>Jewelry</td>\n",
              "      <td>Necklaces</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   train_id  ...           sub_cat_2\n",
              "0         0  ...            T-shirts\n",
              "1         1  ...  Components & Parts\n",
              "2         2  ...              Blouse\n",
              "3         3  ...  Home Décor Accents\n",
              "4         4  ...           Necklaces\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nGdOFpmHrLWh",
        "colab_type": "code",
        "outputId": "4b269948-fa92-4130-9901-1f32187bd587",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "print(\"No of unique values in main_cat: \", len(train['main_cat'].unique()))\n",
        "print(\"No of unique values in sub_cat_1: \", len(train['sub_cat_1'].unique()))\n",
        "print(\"No of unique values in sub_cat_2: \", len(train['sub_cat_1'].unique()))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "No of unique values in main_cat:  11\n",
            "No of unique values in sub_cat_1:  113\n",
            "No of unique values in sub_cat_2:  113\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5wFAZbwTrLcT",
        "colab_type": "code",
        "outputId": "80191f5b-0ce4-4e2f-a4b3-6f2b79d433d7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 657
        }
      },
      "source": [
        "fig, ax = plt.subplots(figsize=(15,7))\n",
        "sns.countplot(x='main_cat', data=train, ax=ax)\n",
        "plt.title('Item count by main_cat',fontsize=25)\n",
        "plt.ylabel('No of items',fontsize=25)\n",
        "plt.xlabel('')\n",
        "plt.xticks(rotation=70,fontsize=20)\n",
        "plt.yticks(fontsize=20)\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yBMLKv2krLte",
        "colab_type": "code",
        "outputId": "34e3e1f1-5529-42cb-dee7-a03581877f37",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        }
      },
      "source": [
        "train['sub_cat_1'].value_counts()[:10].plot(kind='bar', figsize = (15,7), title=\"sub_cat_1 Top 10\", fontsize=20)\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EbpRQeMXrLsU",
        "colab_type": "code",
        "outputId": "017c7930-c452-47da-c9af-3c19765d3503",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 665
        }
      },
      "source": [
        "train['sub_cat_2'].value_counts()[:10].plot(kind='bar', figsize = (15, 7), title=\"sub_cat_2 Top 10\", fontsize=20)\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gB9S7QbIrLpS",
        "colab_type": "code",
        "outputId": "6fa664fe-b9d3-4f1e-9ad0-6f0b5782f2cd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# Test\n",
        "# Splitting categories into 3 features: main_cat, sub_cat_1, sub_cat_2\n",
        "\n",
        "#main_cat, sub_cat_1, sub_cat_2 = train['category_name'].split('/')\n",
        "\n",
        "main_cat = []\n",
        "sub_cat_1 = []\n",
        "sub_cat_2 = []\n",
        "\n",
        "for row in tqdm(test['category_name']):\n",
        "    try:\n",
        "        main, sub_1, sub_2 = row.split('/')\n",
        "        main_cat.append(main)\n",
        "        sub_cat_1.append(sub_1)\n",
        "        sub_cat_2.append(sub_2)\n",
        "    except:\n",
        "        main_cat.append(\"Others\")\n",
        "        sub_cat_1.append(\"Others\")\n",
        "        sub_cat_2.append(\"Others\")\n",
        "\n",
        "print(len(main_cat))\n",
        "print(len(sub_cat_1))\n",
        "print(len(sub_cat_2))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 693359/693359 [00:00<00:00, 842217.48it/s]"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "693359\n",
            "693359\n",
            "693359\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x9LWOygpAJyr",
        "colab_type": "code",
        "outputId": "e8004239-42a8-44eb-d565-bce2336d6ced",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        }
      },
      "source": [
        "# Adding these new features to the test dataframe\n",
        "test['main_cat'] = main_cat\n",
        "test['sub_cat_1'] = sub_cat_1\n",
        "test['sub_cat_2'] = sub_cat_2\n",
        "\n",
        "test.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>test_id</th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>main_cat</th>\n",
              "      <th>sub_cat_1</th>\n",
              "      <th>sub_cat_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Breast cancer \"I fight like a girl\" ring</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Rings</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>Size 7</td>\n",
              "      <td>Women</td>\n",
              "      <td>Jewelry</td>\n",
              "      <td>Rings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>25 pcs NEW 7.5\"x12\" Kraft Bubble Mailers</td>\n",
              "      <td>1</td>\n",
              "      <td>Other/Office supplies/Shipping Supplies</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>25 pcs NEW 7.5\"x12\" Kraft Bubble Mailers Lined...</td>\n",
              "      <td>Other</td>\n",
              "      <td>Office supplies</td>\n",
              "      <td>Shipping Supplies</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Coach bag</td>\n",
              "      <td>1</td>\n",
              "      <td>Vintage &amp; Collectibles/Bags and Purses/Handbag</td>\n",
              "      <td>Coach</td>\n",
              "      <td>1</td>\n",
              "      <td>Brand new coach bag. Bought for [rm] at a Coac...</td>\n",
              "      <td>Vintage &amp; Collectibles</td>\n",
              "      <td>Bags and Purses</td>\n",
              "      <td>Handbag</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Floral Kimono</td>\n",
              "      <td>2</td>\n",
              "      <td>Women/Sweaters/Cardigan</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0</td>\n",
              "      <td>-floral kimono -never worn -lightweight and pe...</td>\n",
              "      <td>Women</td>\n",
              "      <td>Sweaters</td>\n",
              "      <td>Cardigan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Life after Death</td>\n",
              "      <td>3</td>\n",
              "      <td>Other/Books/Religion &amp; Spirituality</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>Rediscovering life after the loss of a loved o...</td>\n",
              "      <td>Other</td>\n",
              "      <td>Books</td>\n",
              "      <td>Religion &amp; Spirituality</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   test_id  ...                sub_cat_2\n",
              "0        0  ...                    Rings\n",
              "1        1  ...        Shipping Supplies\n",
              "2        2  ...                  Handbag\n",
              "3        3  ...                 Cardigan\n",
              "4        4  ...  Religion & Spirituality\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PTqkWFWoAJvt",
        "colab_type": "code",
        "outputId": "85c2eeac-001b-4647-f229-dba930a19874",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "print(\"No of unique values in main_cat: \", len(test['main_cat'].unique()))\n",
        "print(\"No of unique values in sub_cat_1: \", len(test['sub_cat_1'].unique()))\n",
        "print(\"No of unique values in sub_cat_2: \", len(test['sub_cat_1'].unique()))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "No of unique values in main_cat:  11\n",
            "No of unique values in sub_cat_1:  113\n",
            "No of unique values in sub_cat_2:  113\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gNZm0NbfAJtI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XGy6R9vOuFvF",
        "colab_type": "text"
      },
      "source": [
        "## 5. item_description"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fZFlj85_rLjN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# description is text column. We can use the length of each row"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BsaQl8dhrLaw",
        "colab_type": "code",
        "outputId": "e23d329d-151c-4b60-eee9-364c8835ea20",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# https://stackoverflow.com/questions/37335598/how-to-get-the-length-of-a-cell-value-in-pandas-dataframe\n",
        "desc_length = train['item_description'].apply(len)\n",
        "print(len(desc_length))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1482535\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jHCsHMwguBde",
        "colab_type": "code",
        "outputId": "ab591568-38c4-476e-f54f-7fc48931a485",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        }
      },
      "source": [
        "train['desc_length'] = desc_length\n",
        "train.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_id</th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>price</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>Log_Price</th>\n",
              "      <th>main_cat</th>\n",
              "      <th>sub_cat_1</th>\n",
              "      <th>sub_cat_2</th>\n",
              "      <th>desc_length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>MLB Cincinnati Reds T Shirt Size XL</td>\n",
              "      <td>3</td>\n",
              "      <td>Men/Tops/T-shirts</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>No description yet</td>\n",
              "      <td>2.397895</td>\n",
              "      <td>Men</td>\n",
              "      <td>Tops</td>\n",
              "      <td>T-shirts</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Razer BlackWidow Chroma Keyboard</td>\n",
              "      <td>3</td>\n",
              "      <td>Electronics/Computers &amp; Tablets/Components &amp; P...</td>\n",
              "      <td>Razer</td>\n",
              "      <td>52.0</td>\n",
              "      <td>0</td>\n",
              "      <td>This keyboard is in great condition and works ...</td>\n",
              "      <td>3.970292</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Computers &amp; Tablets</td>\n",
              "      <td>Components &amp; Parts</td>\n",
              "      <td>188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>AVA-VIV Blouse</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Tops &amp; Blouses/Blouse</td>\n",
              "      <td>Target</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Adorable top with a hint of lace and a key hol...</td>\n",
              "      <td>2.397895</td>\n",
              "      <td>Women</td>\n",
              "      <td>Tops &amp; Blouses</td>\n",
              "      <td>Blouse</td>\n",
              "      <td>124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Leather Horse Statues</td>\n",
              "      <td>1</td>\n",
              "      <td>Home/Home Décor/Home Décor Accents</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>New with tags. Leather horses. Retail for [rm]...</td>\n",
              "      <td>3.583519</td>\n",
              "      <td>Home</td>\n",
              "      <td>Home Décor</td>\n",
              "      <td>Home Décor Accents</td>\n",
              "      <td>173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>24K GOLD plated rose</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Necklaces</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0</td>\n",
              "      <td>Complete with certificate of authenticity</td>\n",
              "      <td>3.806662</td>\n",
              "      <td>Women</td>\n",
              "      <td>Jewelry</td>\n",
              "      <td>Necklaces</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   train_id  ... desc_length\n",
              "0         0  ...          18\n",
              "1         1  ...         188\n",
              "2         2  ...         124\n",
              "3         3  ...         173\n",
              "4         4  ...          41\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wwlrVAMDuBxC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k8iukrowwnuA",
        "colab_type": "text"
      },
      "source": [
        "## 6. brand_name"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FDdX1QY_uB2d",
        "colab_type": "code",
        "outputId": "f7b4c78d-02f1-41db-b37b-560d1bd921aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Unique brands\n",
        "len(train['brand_name'].unique())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4810"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GN_ETXzxuCI8",
        "colab_type": "code",
        "outputId": "ee63c410-73ad-4adf-da94-a1c96c48a9e5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        }
      },
      "source": [
        "train['brand_name'].value_counts()[:10].plot(kind='bar', figsize = (15, 7), title=\"Top 10 Brands\", fontsize=20)\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-JpAMPiuuCHp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dyTWVpAjyVZn",
        "colab_type": "text"
      },
      "source": [
        "# Data Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fPU87kosuB81",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# https://stackoverflow.com/a/47091490/4084039\n",
        "\n",
        "def decontracted(phrase):\n",
        "    # specific\n",
        "    phrase = re.sub(r\"won't\", \"will not\", phrase)\n",
        "    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n",
        "\n",
        "    # general\n",
        "    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n",
        "    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n",
        "    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n",
        "    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n",
        "    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n",
        "    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n",
        "    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n",
        "    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n",
        "    return phrase"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fO17fI7puB6t",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# https://gist.github.com/sebleier/554280\n",
        "# we are removing the words from the stop words list: 'no', 'nor', 'not'\n",
        "stopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n",
        "            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n",
        "            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n",
        "            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n",
        "            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n",
        "            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n",
        "            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n",
        "            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n",
        "            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n",
        "            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n",
        "            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n",
        "            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n",
        "            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n",
        "            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n",
        "            'won', \"won't\", 'wouldn', \"wouldn't\"]\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tCtz22FMuB1G",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N87TGZ-nzbSq",
        "colab_type": "text"
      },
      "source": [
        "## Train: item_description"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vSFcTn6RuBvc",
        "colab_type": "code",
        "outputId": "7031031a-162c-4fef-9001-1100c9db527f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Train['item_description']\n",
        "\n",
        "preprocessed_item_description = []\n",
        "# tqdm is for printing the status bar\n",
        "for sentance in tqdm(train['item_description'].values):\n",
        "    sent = decontracted(sentance)\n",
        "    sent = sent.replace('\\\\r', ' ')\n",
        "    sent = sent.replace('\\\\\"', ' ')\n",
        "    sent = sent.replace('\\\\n', ' ')\n",
        "    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n",
        "    # https://gist.github.com/sebleier/554280\n",
        "    sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n",
        "    preprocessed_item_description.append(sent.lower().strip())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 1482535/1482535 [01:55<00:00, 12796.05it/s]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vnYgEzYI1aHb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train['item_description'] = preprocessed_item_description"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gn6KKxh-zw0o",
        "colab_type": "text"
      },
      "source": [
        "## Test: item_description"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VwT39at9uBuG",
        "colab_type": "code",
        "outputId": "1b070eb0-57bc-4bd0-a988-7a4ef24988db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# test['item_description']\n",
        "\n",
        "preprocessed_item_description = []\n",
        "# tqdm is for printing the status bar\n",
        "for sentance in tqdm(test['item_description'].values):\n",
        "    sent = decontracted(sentance)\n",
        "    sent = sent.replace('\\\\r', ' ')\n",
        "    sent = sent.replace('\\\\\"', ' ')\n",
        "    sent = sent.replace('\\\\n', ' ')\n",
        "    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n",
        "    # https://gist.github.com/sebleier/554280\n",
        "    sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n",
        "    preprocessed_item_description.append(sent.lower().strip())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 693359/693359 [00:52<00:00, 13167.45it/s]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ca7zb_lT1iFN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test['item_description'] = preprocessed_item_description"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7tpRuWrz1WDB",
        "colab_type": "text"
      },
      "source": [
        "## Train: title"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RnttPOCluBrO",
        "colab_type": "code",
        "outputId": "788bc124-67b9-4676-8790-0a02ba279d86",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Train['name']\n",
        "\n",
        "preprocessed_name = []\n",
        "# tqdm is for printing the status bar\n",
        "for sentance in tqdm(train['name'].values):\n",
        "    sent = decontracted(sentance)\n",
        "    sent = sent.replace('\\\\r', ' ')\n",
        "    sent = sent.replace('\\\\\"', ' ')\n",
        "    sent = sent.replace('\\\\n', ' ')\n",
        "    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n",
        "    # https://gist.github.com/sebleier/554280\n",
        "    sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n",
        "    preprocessed_name.append(sent.lower().strip())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 1482535/1482535 [00:34<00:00, 42389.22it/s]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mqWPBwa3uBjw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train['name'] = preprocessed_name"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lsc3CNIQ2lTy",
        "colab_type": "text"
      },
      "source": [
        "## Test: title"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ug2CaeG_uBiI",
        "colab_type": "code",
        "outputId": "5bf620a5-1bbc-4616-a99e-2ac42ba527d4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Test['name']\n",
        "\n",
        "preprocessed_name = []\n",
        "# tqdm is for printing the status bar\n",
        "for sentance in tqdm(test['name'].values):\n",
        "    sent = decontracted(sentance)\n",
        "    sent = sent.replace('\\\\r', ' ')\n",
        "    sent = sent.replace('\\\\\"', ' ')\n",
        "    sent = sent.replace('\\\\n', ' ')\n",
        "    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n",
        "    # https://gist.github.com/sebleier/554280\n",
        "    sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n",
        "    preprocessed_name.append(sent.lower().strip())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 693359/693359 [00:16<00:00, 42427.87it/s]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9JvMdQgZuBar",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test['name'] = preprocessed_name"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bMyJ2DPFuBZY",
        "colab_type": "code",
        "outputId": "c2eeee5d-26d4-4439-81d6-c8ef7cca8d2a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        }
      },
      "source": [
        "train.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>train_id</th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>price</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>Log_Price</th>\n",
              "      <th>main_cat</th>\n",
              "      <th>sub_cat_1</th>\n",
              "      <th>sub_cat_2</th>\n",
              "      <th>desc_length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>mlb cincinnati reds shirt size xl</td>\n",
              "      <td>3</td>\n",
              "      <td>Men/Tops/T-shirts</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>no description yet</td>\n",
              "      <td>2.397895</td>\n",
              "      <td>Men</td>\n",
              "      <td>Tops</td>\n",
              "      <td>T-shirts</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>razer blackwidow chroma keyboard</td>\n",
              "      <td>3</td>\n",
              "      <td>Electronics/Computers &amp; Tablets/Components &amp; P...</td>\n",
              "      <td>Razer</td>\n",
              "      <td>52.0</td>\n",
              "      <td>0</td>\n",
              "      <td>keyboard great condition works like came box p...</td>\n",
              "      <td>3.970292</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Computers &amp; Tablets</td>\n",
              "      <td>Components &amp; Parts</td>\n",
              "      <td>188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>ava viv blouse</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Tops &amp; Blouses/Blouse</td>\n",
              "      <td>Target</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>adorable top hint lace key hole back pale pink...</td>\n",
              "      <td>2.397895</td>\n",
              "      <td>Women</td>\n",
              "      <td>Tops &amp; Blouses</td>\n",
              "      <td>Blouse</td>\n",
              "      <td>124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>leather horse statues</td>\n",
              "      <td>1</td>\n",
              "      <td>Home/Home Décor/Home Décor Accents</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>new tags leather horses retail rm stand foot h...</td>\n",
              "      <td>3.583519</td>\n",
              "      <td>Home</td>\n",
              "      <td>Home Décor</td>\n",
              "      <td>Home Décor Accents</td>\n",
              "      <td>173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>24k gold plated rose</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Necklaces</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0</td>\n",
              "      <td>complete certificate authenticity</td>\n",
              "      <td>3.806662</td>\n",
              "      <td>Women</td>\n",
              "      <td>Jewelry</td>\n",
              "      <td>Necklaces</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   train_id                               name  ...           sub_cat_2 desc_length\n",
              "0         0  mlb cincinnati reds shirt size xl  ...            T-shirts          18\n",
              "1         1   razer blackwidow chroma keyboard  ...  Components & Parts         188\n",
              "2         2                     ava viv blouse  ...              Blouse         124\n",
              "3         3              leather horse statues  ...  Home Décor Accents         173\n",
              "4         4               24k gold plated rose  ...           Necklaces          41\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6v6tfSjuuBXz",
        "colab_type": "code",
        "outputId": "4f42795e-5b76-4370-e862-19d1d8a1ec9b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        }
      },
      "source": [
        "test.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>test_id</th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>main_cat</th>\n",
              "      <th>sub_cat_1</th>\n",
              "      <th>sub_cat_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>breast cancer fight like girl ring</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Rings</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>size 7</td>\n",
              "      <td>Women</td>\n",
              "      <td>Jewelry</td>\n",
              "      <td>Rings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>25 pcs new 7 5 x12 kraft bubble mailers</td>\n",
              "      <td>1</td>\n",
              "      <td>Other/Office supplies/Shipping Supplies</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>25 pcs new 7 5 x12 kraft bubble mailers lined ...</td>\n",
              "      <td>Other</td>\n",
              "      <td>Office supplies</td>\n",
              "      <td>Shipping Supplies</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>coach bag</td>\n",
              "      <td>1</td>\n",
              "      <td>Vintage &amp; Collectibles/Bags and Purses/Handbag</td>\n",
              "      <td>Coach</td>\n",
              "      <td>1</td>\n",
              "      <td>brand new coach bag bought rm coach outlet</td>\n",
              "      <td>Vintage &amp; Collectibles</td>\n",
              "      <td>Bags and Purses</td>\n",
              "      <td>Handbag</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>floral kimono</td>\n",
              "      <td>2</td>\n",
              "      <td>Women/Sweaters/Cardigan</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0</td>\n",
              "      <td>floral kimono never worn lightweight perfect h...</td>\n",
              "      <td>Women</td>\n",
              "      <td>Sweaters</td>\n",
              "      <td>Cardigan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>life death</td>\n",
              "      <td>3</td>\n",
              "      <td>Other/Books/Religion &amp; Spirituality</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>rediscovering life loss loved one tony cooke p...</td>\n",
              "      <td>Other</td>\n",
              "      <td>Books</td>\n",
              "      <td>Religion &amp; Spirituality</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   test_id  ...                sub_cat_2\n",
              "0        0  ...                    Rings\n",
              "1        1  ...        Shipping Supplies\n",
              "2        2  ...                  Handbag\n",
              "3        3  ...                 Cardigan\n",
              "4        4  ...  Religion & Spirituality\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-VfsflxfuBWc",
        "colab_type": "code",
        "outputId": "f36481b2-71c5-4e63-ef59-13862b545730",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "train.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1482535, 13)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bx0odGpnuBOW",
        "colab_type": "code",
        "outputId": "18969ac6-1b69-496f-e1b4-8f6c26c3574c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "test.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(693359, 10)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yrE1xLdt3EbB",
        "colab_type": "text"
      },
      "source": [
        "# Train Validation Split\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OYeHi1WarLUm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Storing Log_Price in y_val\n",
        "y_val = train['Log_Price']\n",
        "\n",
        "# Dropping some columns\n",
        "train.drop(['price', 'train_id','Log_Price'], axis=1, inplace=True)  # desc_length"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xinu4WhS9w4Y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train.drop('desc_length', axis=1, inplace=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D8knnRzn3ISO",
        "colab_type": "code",
        "outputId": "4760ea81-ff5c-4302-c902-c6c4bfa2af4d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        }
      },
      "source": [
        "train.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>main_cat</th>\n",
              "      <th>sub_cat_1</th>\n",
              "      <th>sub_cat_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>mlb cincinnati reds shirt size xl</td>\n",
              "      <td>3</td>\n",
              "      <td>Men/Tops/T-shirts</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>no description yet</td>\n",
              "      <td>Men</td>\n",
              "      <td>Tops</td>\n",
              "      <td>T-shirts</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>razer blackwidow chroma keyboard</td>\n",
              "      <td>3</td>\n",
              "      <td>Electronics/Computers &amp; Tablets/Components &amp; P...</td>\n",
              "      <td>Razer</td>\n",
              "      <td>0</td>\n",
              "      <td>keyboard great condition works like came box p...</td>\n",
              "      <td>Electronics</td>\n",
              "      <td>Computers &amp; Tablets</td>\n",
              "      <td>Components &amp; Parts</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ava viv blouse</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Tops &amp; Blouses/Blouse</td>\n",
              "      <td>Target</td>\n",
              "      <td>1</td>\n",
              "      <td>adorable top hint lace key hole back pale pink...</td>\n",
              "      <td>Women</td>\n",
              "      <td>Tops &amp; Blouses</td>\n",
              "      <td>Blouse</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>leather horse statues</td>\n",
              "      <td>1</td>\n",
              "      <td>Home/Home Décor/Home Décor Accents</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>new tags leather horses retail rm stand foot h...</td>\n",
              "      <td>Home</td>\n",
              "      <td>Home Décor</td>\n",
              "      <td>Home Décor Accents</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24k gold plated rose</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Necklaces</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0</td>\n",
              "      <td>complete certificate authenticity</td>\n",
              "      <td>Women</td>\n",
              "      <td>Jewelry</td>\n",
              "      <td>Necklaces</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                name  ...           sub_cat_2\n",
              "0  mlb cincinnati reds shirt size xl  ...            T-shirts\n",
              "1   razer blackwidow chroma keyboard  ...  Components & Parts\n",
              "2                     ava viv blouse  ...              Blouse\n",
              "3              leather horse statues  ...  Home Décor Accents\n",
              "4               24k gold plated rose  ...           Necklaces\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RcCq3BQ73IQb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Stroing the test_id into a seperate vaariable\n",
        "test_ids = test['test_id'].values.astype(np.int32)\n",
        "\n",
        "test.drop(\"test_id\", axis=1, inplace=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CiiyYivS3IOt",
        "colab_type": "code",
        "outputId": "ca324a2a-9175-4a74-c783-0c42a9e35148",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        }
      },
      "source": [
        "test.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>main_cat</th>\n",
              "      <th>sub_cat_1</th>\n",
              "      <th>sub_cat_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>breast cancer fight like girl ring</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Jewelry/Rings</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>size 7</td>\n",
              "      <td>Women</td>\n",
              "      <td>Jewelry</td>\n",
              "      <td>Rings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25 pcs new 7 5 x12 kraft bubble mailers</td>\n",
              "      <td>1</td>\n",
              "      <td>Other/Office supplies/Shipping Supplies</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>25 pcs new 7 5 x12 kraft bubble mailers lined ...</td>\n",
              "      <td>Other</td>\n",
              "      <td>Office supplies</td>\n",
              "      <td>Shipping Supplies</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>coach bag</td>\n",
              "      <td>1</td>\n",
              "      <td>Vintage &amp; Collectibles/Bags and Purses/Handbag</td>\n",
              "      <td>Coach</td>\n",
              "      <td>1</td>\n",
              "      <td>brand new coach bag bought rm coach outlet</td>\n",
              "      <td>Vintage &amp; Collectibles</td>\n",
              "      <td>Bags and Purses</td>\n",
              "      <td>Handbag</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>floral kimono</td>\n",
              "      <td>2</td>\n",
              "      <td>Women/Sweaters/Cardigan</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0</td>\n",
              "      <td>floral kimono never worn lightweight perfect h...</td>\n",
              "      <td>Women</td>\n",
              "      <td>Sweaters</td>\n",
              "      <td>Cardigan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>life death</td>\n",
              "      <td>3</td>\n",
              "      <td>Other/Books/Religion &amp; Spirituality</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>rediscovering life loss loved one tony cooke p...</td>\n",
              "      <td>Other</td>\n",
              "      <td>Books</td>\n",
              "      <td>Religion &amp; Spirituality</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                      name  ...                sub_cat_2\n",
              "0       breast cancer fight like girl ring  ...                    Rings\n",
              "1  25 pcs new 7 5 x12 kraft bubble mailers  ...        Shipping Supplies\n",
              "2                                coach bag  ...                  Handbag\n",
              "3                            floral kimono  ...                 Cardigan\n",
              "4                               life death  ...  Religion & Spirituality\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "77lX9zvR3H5d",
        "colab_type": "code",
        "outputId": "bf63515d-8221-4be2-bce2-9f6303a16e19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "print(train.shape)\n",
        "print(test.shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1482535, 9)\n",
            "(693359, 9)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OEq9wMaI3H32",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9-O2xk_R3Hw9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Train Validation Split\n",
        "\n",
        "x_train, x_val, y_train, y_val = train_test_split(train, y_val, test_size=0.2, random_state=42)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5-EmPaNFqNXX",
        "colab_type": "code",
        "outputId": "51d4e35a-4de6-4b88-b5db-c10d379503fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "print(x_train.shape, y_train.shape)\n",
        "print(x_val.shape, y_val.shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1186028, 9) (1186028,)\n",
            "(296507, 9) (296507,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GCKAaWreCAQO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6Z4pqtvGCIWS",
        "colab_type": "text"
      },
      "source": [
        "# Vectorizing for Text and Categorical Features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gEShhE7pCyVh",
        "colab_type": "text"
      },
      "source": [
        "## 1. Name"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bxnW9C1WCAgX",
        "colab_type": "code",
        "outputId": "59d31c06-6718-403f-b98a-a76347e5410d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# Name\n",
        "vectorizer = CountVectorizer(max_features=500, min_df=5)\n",
        "\n",
        "# Train\n",
        "vectorizer.fit(x_train['name'].values)\n",
        "train_name = vectorizer.transform(x_train['name'].values)\n",
        "\n",
        "# Validation\n",
        "val_name = vectorizer.transform(x_val['name'].values)\n",
        "\n",
        "# Test\n",
        "test_name = vectorizer.transform(test['name'].values)\n",
        "\n",
        "\n",
        "print(\"Shapes:\")\n",
        "print(\"Train: \", train_name.shape)\n",
        "print(\"Val: \", val_name.shape)\n",
        "print(\"Test: \", test_name.shape)  "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shapes:\n",
            "Train:  (1186028, 500)\n",
            "Val:  (296507, 500)\n",
            "Test:  (693359, 500)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jAy3guy_EJVy",
        "colab_type": "text"
      },
      "source": [
        "## 2. item_description"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BVwnziKdCA_k",
        "colab_type": "code",
        "outputId": "f98157f5-062b-4fe7-9a25-e2865ffa5b06",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# item_description\n",
        "vectorizer = CountVectorizer(max_features=5000, min_df=5)\n",
        "\n",
        "# Train\n",
        "vectorizer.fit(x_train['item_description'].values)\n",
        "train_item_desc = vectorizer.transform(x_train['item_description'].values)\n",
        "\n",
        "# Validation\n",
        "val_item_desc = vectorizer.transform(x_val['item_description'].values)\n",
        "\n",
        "# Test\n",
        "test_item_desc = vectorizer.transform(test['item_description'].values)\n",
        "\n",
        "\n",
        "print(\"Shapes:\")\n",
        "print(\"Train: \", train_item_desc.shape)\n",
        "print(\"Val: \", val_item_desc.shape)\n",
        "print(\"Test: \", test_item_desc.shape)  "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shapes:\n",
            "Train:  (1186028, 5000)\n",
            "Val:  (296507, 5000)\n",
            "Test:  (693359, 5000)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8qLhHITkE8v3",
        "colab_type": "text"
      },
      "source": [
        "## 3. brand_name"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E3P8DD5CCA9q",
        "colab_type": "code",
        "outputId": "38e51dc5-4d7d-4b59-e70c-82b98822597e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# brand_name\n",
        "vectorizer = CountVectorizer()\n",
        "\n",
        "# Train\n",
        "vectorizer.fit(x_train['brand_name'].values)\n",
        "train_brand_name = vectorizer.transform(x_train['brand_name'].values)\n",
        "\n",
        "# Validation\n",
        "val_brand_name = vectorizer.transform(x_val['brand_name'].values)\n",
        "\n",
        "# Test\n",
        "test_brand_name = vectorizer.transform(test['brand_name'].values)\n",
        "\n",
        "\n",
        "print(\"Shapes:\")\n",
        "print(\"Train: \", train_brand_name.shape)\n",
        "print(\"Val: \", val_brand_name.shape)\n",
        "print(\"Test: \", test_brand_name.shape)   "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shapes:\n",
            "Train:  (1186028, 4822)\n",
            "Val:  (296507, 4822)\n",
            "Test:  (693359, 4822)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yMRoMWN5FeXK",
        "colab_type": "text"
      },
      "source": [
        "## 4. main_cat\t"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YuxWiVvaCA8K",
        "colab_type": "code",
        "outputId": "c760d9c7-0ea4-4b2f-bd4e-27c76296f0d0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# main_cat\t\n",
        "vectorizer = CountVectorizer()\n",
        "\n",
        "# Train\n",
        "vectorizer.fit(x_train['main_cat'].values)\n",
        "train_main_cat = vectorizer.transform(x_train['main_cat'].values)\n",
        "\n",
        "# Validation\n",
        "val_main_cat = vectorizer.transform(x_val['main_cat'].values)\n",
        "\n",
        "# Test\n",
        "test_main_cat = vectorizer.transform(test['main_cat'].values)\n",
        "\n",
        "\n",
        "print(\"Shapes:\")\n",
        "print(\"Train: \", train_main_cat.shape)\n",
        "print(\"Val: \", val_main_cat.shape)\n",
        "print(\"Test: \", test_main_cat.shape)   "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shapes:\n",
            "Train:  (1186028, 13)\n",
            "Val:  (296507, 13)\n",
            "Test:  (693359, 13)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YvM7gaRJFwhb",
        "colab_type": "text"
      },
      "source": [
        "## 5. sub_cat_1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sjrUOqq1CA6n",
        "colab_type": "code",
        "outputId": "104e066d-1df1-4a9f-8b90-4a81250d155e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# sub_cat_1\n",
        "vectorizer = CountVectorizer()\n",
        "\n",
        "# Train\n",
        "vectorizer.fit(x_train['sub_cat_1'].values)\n",
        "train_sub_cat_1 = vectorizer.transform(x_train['sub_cat_1'].values)\n",
        "\n",
        "# Validation\n",
        "val_sub_cat_1 = vectorizer.transform(x_val['sub_cat_1'].values)\n",
        "\n",
        "# Test\n",
        "test_sub_cat_1 = vectorizer.transform(test['sub_cat_1'].values)\n",
        "\n",
        "\n",
        "print(\"Shapes:\")\n",
        "print(\"Train: \", train_sub_cat_1.shape)\n",
        "print(\"Val: \", val_sub_cat_1.shape)\n",
        "print(\"Test: \", test_sub_cat_1.shape) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shapes:\n",
            "Train:  (1186028, 141)\n",
            "Val:  (296507, 141)\n",
            "Test:  (693359, 141)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XOBaUdEcGG3u",
        "colab_type": "text"
      },
      "source": [
        "## 6. sub_cat_2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EE9o8SorCA4z",
        "colab_type": "code",
        "outputId": "629b7f73-87c2-494d-f2ca-6bfecf59a063",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# sub_cat_2\n",
        "vectorizer = CountVectorizer()\n",
        "\n",
        "# Train\n",
        "vectorizer.fit(x_train['sub_cat_2'].values)\n",
        "train_sub_cat_2 = vectorizer.transform(x_train['sub_cat_2'].values)\n",
        "\n",
        "# Validation\n",
        "val_sub_cat_2 = vectorizer.transform(x_val['sub_cat_2'].values)\n",
        "\n",
        "# Test\n",
        "test_sub_cat_2 = vectorizer.transform(test['sub_cat_2'].values)\n",
        "\n",
        "\n",
        "print(\"Shapes:\")\n",
        "print(\"Train: \", train_sub_cat_2.shape)\n",
        "print(\"Val: \", val_sub_cat_2.shape)\n",
        "print(\"Test: \", test_sub_cat_2.shape) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shapes:\n",
            "Train:  (1186028, 950)\n",
            "Val:  (296507, 950)\n",
            "Test:  (693359, 950)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n8ycUJfcJpKZ",
        "colab_type": "text"
      },
      "source": [
        "## 7. item_condition_id"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cLOMmRWVCAzE",
        "colab_type": "code",
        "outputId": "2ee527db-40fd-4cfe-cc93-c70c1567d9b9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# item_condition_id\n",
        "encoder = OneHotEncoder()\n",
        "\n",
        "# Train\n",
        "encoder.fit(x_train['item_condition_id'].values.reshape(-1, 1))\n",
        "train_item_condition_id = encoder.transform(x_train['item_condition_id'].values.reshape(-1, 1))\n",
        "\n",
        "# Validation\n",
        "val_item_condition_id = encoder.transform(x_val['item_condition_id'].values.reshape(-1, 1))\n",
        "\n",
        "# Test\n",
        "test_item_condition_id = encoder.transform(test['item_condition_id'].values.reshape(-1, 1))\n",
        "\n",
        "\n",
        "print(\"Shapes:\")\n",
        "print(\"Train: \", train_item_condition_id.shape)\n",
        "print(\"Val: \", val_item_condition_id.shape)\n",
        "print(\"Test: \", test_item_condition_id.shape) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shapes:\n",
            "Train:  (1186028, 5)\n",
            "Val:  (296507, 5)\n",
            "Test:  (693359, 5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yt-YJ3c2LbrV",
        "colab_type": "text"
      },
      "source": [
        "## 8. shipping"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mcZyI8ihCAeX",
        "colab_type": "code",
        "outputId": "20a359d5-b5d8-41f6-fa41-82f9a8576501",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# shipping\n",
        "encoder = OneHotEncoder()\n",
        "\n",
        "# Train\n",
        "encoder.fit(x_train['shipping'].values.reshape(-1, 1))\n",
        "train_shipping = encoder.transform(x_train['shipping'].values.reshape(-1, 1))\n",
        "\n",
        "# Validation\n",
        "val_shipping = encoder.transform(x_val['shipping'].values.reshape(-1, 1))\n",
        "\n",
        "# Test\n",
        "test_shipping = encoder.transform(test['shipping'].values.reshape(-1, 1))\n",
        "\n",
        "\n",
        "print(\"Shapes:\")\n",
        "print(\"Train: \", train_shipping.shape)\n",
        "print(\"Val: \", val_shipping.shape)\n",
        "print(\"Test: \", test_shipping.shape) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shapes:\n",
            "Train:  (1186028, 2)\n",
            "Val:  (296507, 2)\n",
            "Test:  (693359, 2)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xoOTubEnG27p",
        "colab_type": "text"
      },
      "source": [
        "# Stacking Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "59ld9sydJaeU",
        "colab_type": "code",
        "outputId": "6f032650-b312-4991-8538-4962b9aaa391",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        }
      },
      "source": [
        "x_train.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>item_condition_id</th>\n",
              "      <th>category_name</th>\n",
              "      <th>brand_name</th>\n",
              "      <th>shipping</th>\n",
              "      <th>item_description</th>\n",
              "      <th>main_cat</th>\n",
              "      <th>sub_cat_1</th>\n",
              "      <th>sub_cat_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1416089</th>\n",
              "      <td>lularoe kids l xl leggings</td>\n",
              "      <td>3</td>\n",
              "      <td>Kids/Boys (4+)/Bottoms</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "      <td>worn still great condition</td>\n",
              "      <td>Kids</td>\n",
              "      <td>Boys (4+)</td>\n",
              "      <td>Bottoms</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1423955</th>\n",
              "      <td>bundle 5 display mannequins</td>\n",
              "      <td>1</td>\n",
              "      <td>Other/Other/Other</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0</td>\n",
              "      <td>brand new</td>\n",
              "      <td>Other</td>\n",
              "      <td>Other</td>\n",
              "      <td>Other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>403867</th>\n",
              "      <td>living proof perfect hair day dry shampo</td>\n",
              "      <td>1</td>\n",
              "      <td>Beauty/Hair Care/Styling Products</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0</td>\n",
              "      <td>listing 3 full size bottles living proof perfe...</td>\n",
              "      <td>Beauty</td>\n",
              "      <td>Hair Care</td>\n",
              "      <td>Styling Products</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>701974</th>\n",
              "      <td>palazzo pants</td>\n",
              "      <td>2</td>\n",
              "      <td>Women/Pants/Casual Pants</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0</td>\n",
              "      <td>like new adorable black white palazzo pants no...</td>\n",
              "      <td>Women</td>\n",
              "      <td>Pants</td>\n",
              "      <td>Casual Pants</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1124330</th>\n",
              "      <td>reserved ms jas pink boyshorts large</td>\n",
              "      <td>1</td>\n",
              "      <td>Women/Underwear/Panties</td>\n",
              "      <td>PINK</td>\n",
              "      <td>1</td>\n",
              "      <td>new tags morning sky sheer seafoam olive green</td>\n",
              "      <td>Women</td>\n",
              "      <td>Underwear</td>\n",
              "      <td>Panties</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                             name  ...         sub_cat_2\n",
              "1416089                lularoe kids l xl leggings  ...           Bottoms\n",
              "1423955               bundle 5 display mannequins  ...             Other\n",
              "403867   living proof perfect hair day dry shampo  ...  Styling Products\n",
              "701974                              palazzo pants  ...      Casual Pants\n",
              "1124330      reserved ms jas pink boyshorts large  ...           Panties\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "svZtGw93CANi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Stacking Train data\n",
        "x_train_final = hstack((train_name, train_item_desc, train_brand_name, train_main_cat, train_sub_cat_1, train_sub_cat_2, train_item_condition_id, \\\n",
        "                        train_shipping)).tocsr()  \n",
        "\n",
        "# Stacking Validation Data\n",
        "x_val_final = hstack((val_name, val_item_desc, val_brand_name, val_main_cat, val_sub_cat_1, val_sub_cat_2, val_item_condition_id, val_shipping)).tocsr()\n",
        "\n",
        "\n",
        "# Stacking Test Data\n",
        "x_test_final = hstack((test_name, test_item_desc, test_brand_name, test_main_cat, test_sub_cat_1, test_sub_cat_2, test_item_condition_id, \\\n",
        "                       test_shipping)).tocsr()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9TUm71oACAJ_",
        "colab_type": "code",
        "outputId": "61e16c7c-ca9a-46ac-d6a4-839880887cc1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "print('x_train_final shape: ', x_train_final.shape, \"|||  y_train shape\", y_train.shape)\n",
        "print('x_val_final shape: ', x_val_final.shape, \"|||  y_test shape\", y_val.shape)\n",
        "print('x_test_final shape: ', x_test_final.shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "x_train_final shape:  (1186028, 11433) |||  y_train shape (1186028,)\n",
            "x_val_final shape:  (296507, 11433) |||  y_test shape (296507,)\n",
            "x_test_final shape:  (693359, 11433)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tnvN6aTXM6V9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r8ABpqMgNNN2",
        "colab_type": "text"
      },
      "source": [
        "# SGDRegressor"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i9CnfHGEM7Wm",
        "colab_type": "code",
        "outputId": "c8be7922-324d-4fe2-b3be-cb3c73a6f06b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "%%time\n",
        "# Training the Model\n",
        "model = SGDRegressor()\n",
        "model.fit(x_train_final, y_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "CPU times: user 4.86 s, sys: 101 ms, total: 4.96 s\n",
            "Wall time: 4.86 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aj9uMWpRM7gd",
        "colab_type": "code",
        "outputId": "a16c67d0-2166-4220-fe5e-fbee471396a3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Train Data\n",
        "train_pred = model.predict(x_train_final)\n",
        "sgd_train_RMSLE = np.sqrt(mean_squared_error(y_train, train_pred))\n",
        "print(\"Train RMSLE: \", sgd_train_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train RMSLE:  0.5171098022044266\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xsFa420gM7UR",
        "colab_type": "code",
        "outputId": "79c52319-d594-4f02-9ad5-4f3f8363fea8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Validation data\n",
        "val_pred = model.predict(x_val_final)\n",
        "sgd_val_RMSLE = np.sqrt(mean_squared_error(y_val, val_pred))  \n",
        "print(\"Validation RMSLE: \", sgd_val_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation RMSLE:  0.5216289416569649\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HPtfrczqM7So",
        "colab_type": "code",
        "outputId": "2eb6a2f7-4cd5-47a0-9465-a17adee68637",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Test data\n",
        "test_pred_sgd = model.predict(x_test_final)\n",
        "test_pred_sgd.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(693359,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T6XN5jPOM7QP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ATuwzp9NFzpe",
        "colab_type": "text"
      },
      "source": [
        "# Ridge"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PnVgFSwFM7Fh",
        "colab_type": "code",
        "outputId": "b6e94bdd-beda-437e-c803-fd35ce977e1e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "%%time\n",
        "# Training the Model\n",
        "model = Ridge()\n",
        "model.fit(x_train_final, y_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "CPU times: user 1min 2s, sys: 43.4 s, total: 1min 45s\n",
            "Wall time: 53.9 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tj4ElfMwM7Cv",
        "colab_type": "code",
        "outputId": "654db96b-b960-4c24-dd99-dbffdb5a47fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Train Data\n",
        "train_pred = model.predict(x_train_final)\n",
        "ridge_train_RMSLE = np.sqrt(mean_squared_error(y_train, train_pred))\n",
        "print(\"Train RMSLE: \", ridge_train_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train RMSLE:  0.5070766597901347\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LxeHtTOgM67T",
        "colab_type": "code",
        "outputId": "95dbd51c-e305-4470-ecd5-dbf0e181d601",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Validation data\n",
        "val_pred = model.predict(x_val_final)\n",
        "ridge_val_RMSLE = np.sqrt(mean_squared_error(y_val, val_pred))  \n",
        "print(\"Validation RMSLE: \", ridge_val_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation RMSLE:  0.5135844086283321\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iVLo67ztM6ri",
        "colab_type": "code",
        "outputId": "2c552852-ae51-43b3-a57a-8d2942fe9f78",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Test data\n",
        "test_pred_ridge = model.predict(x_test_final)\n",
        "test_pred_ridge.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(693359,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TRyMjRVWM6pC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "22EInBk_G99R",
        "colab_type": "text"
      },
      "source": [
        "# XGBRegressor"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0gfuEn-MM6ca",
        "colab_type": "code",
        "outputId": "da2baec8-0055-4058-cd70-230c7b7a372f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "%%time\n",
        "# Training the Model\n",
        "model = xgb.XGBRegressor()\n",
        "model.fit(x_train_final, y_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[12:16:51] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
            "CPU times: user 3min 35s, sys: 899 ms, total: 3min 36s\n",
            "Wall time: 3min 37s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "b4291889-fb6d-4136-ac26-6ad7460148b1",
        "id": "Z8NZPBfYHTgd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Train Data\n",
        "train_pred = model.predict(x_train_final)\n",
        "xgb_train_RMSLE = np.sqrt(mean_squared_error(y_train, train_pred))\n",
        "print(\"Train RMSLE: \", xgb_train_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train RMSLE:  0.6146981403019418\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "9c32812c-b4c8-4a8a-dcf3-6289e61e3a98",
        "id": "jlyapLBnHTg2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Validation data\n",
        "val_pred = model.predict(x_val_final)\n",
        "xgb_val_RMSLE = np.sqrt(mean_squared_error(y_val, val_pred))   \n",
        "print(\"Validation RMSLE: \", xgb_val_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation RMSLE:  0.6162700673572676\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "ace0fa1f-f05c-4452-baa2-c059d545bbe0",
        "id": "nw71tiBAHThA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Test data\n",
        "test_pred_xgb = model.predict(x_test_final)\n",
        "test_pred_xgb.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(693359,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e7W86WTdM6TO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a83ELhF1Jeky",
        "colab_type": "text"
      },
      "source": [
        "# LGBMRegressor\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "vGGILM5iJ3Eu",
        "outputId": "2b720881-c5e6-4659-e2f2-0b66851adbce",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "%%time\n",
        "# Training the Model\n",
        "model = LGBMRegressor()\n",
        "model.fit(x_train_final, y_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "CPU times: user 2min 58s, sys: 158 ms, total: 2min 58s\n",
            "Wall time: 2min 58s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "0b715efb-c812-4773-a526-8a52e05d1382",
        "id": "jg5qxpKZJ3E9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Train Data\n",
        "train_pred = model.predict(x_train_final)\n",
        "lgbm_train_RMSLE = np.sqrt(mean_squared_error(y_train, train_pred))\n",
        "print(\"Train RMSLE: \", lgbm_train_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train RMSLE:  0.5425120498796302\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "7cb3ee29-3869-42b6-bffc-cf61804a22e2",
        "id": "dKCPAlsAJ3FK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Validation data\n",
        "val_pred = model.predict(x_val_final)\n",
        "lgbm_val_RMSLE = np.sqrt(mean_squared_error(y_val, val_pred))\n",
        "print(\"Validation RMSLE: \", lgbm_val_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation RMSLE:  0.5445418450757752\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "012d0704-d7bd-44b4-dd6e-bc993bc7c300",
        "id": "YMgXvGFtJ3FS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Test data\n",
        "test_pred_LGBM = model.predict(x_test_final)\n",
        "test_pred_LGBM.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(693359,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1KjhQtdsIP35",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ah8RlYL_tg0z",
        "colab_type": "text"
      },
      "source": [
        "# Multilayer Perceptron"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nqUGdlmiIPpO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Using sequential model\n",
        "model = Sequential()\n",
        "\n",
        "model.add(Dense(256, activation='relu', input_dim=11433))  # 11433 is the shape of x_train_final\n",
        "model.add(Dense(128, activation='relu'))\n",
        "model.add(Dropout(0.3))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Dense(64, activation='relu'))\n",
        "model.add(Dense(1))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pi7BiwfKIPiw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# compiling the model\n",
        "model.compile(loss='mse',\n",
        "                optimizer=RMSprop(0.001), #RMSprop(0.001),  # Adam(lr=0.001)\n",
        "                metrics=['mae', 'mse'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gwxfg_0PIPQt",
        "colab_type": "code",
        "outputId": "06f3d593-9e4c-4cec-bff4-53804dcd754d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        }
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense (Dense)                (None, 256)               2927104   \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 128)               32896     \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "batch_normalization (BatchNo (None, 128)               512       \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 64)                8256      \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 1)                 65        \n",
            "=================================================================\n",
            "Total params: 2,968,833\n",
            "Trainable params: 2,968,577\n",
            "Non-trainable params: 256\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ql28zkr50aYl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CSUYkciMElz8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "'''\n",
        "# https://intellipaat.com/community/19874/keras-sparse-matrix-issue\n",
        "def batch_generator(X, y, batch_size):\n",
        "    number_of_batches = X.shape[0]/batch_size \n",
        "    counter=0\n",
        "    shuffle_index = np.arange(np.shape(y)[0])\n",
        "    np.random.shuffle(shuffle_index)\n",
        "    X =  X[shuffle_index, :]\n",
        "    y =  y[shuffle_index]\n",
        "\n",
        "    while 1:\n",
        "        index_batch = shuffle_index[batch_size*counter:batch_size*(counter+1)]\n",
        "        X_batch = X[index_batch,:].todense()\n",
        "        y_batch = y[index_batch]\n",
        "        counter += 1\n",
        "\n",
        "        yield(np.array(X_batch),y_batch)\n",
        "        if (counter < number_of_batches):\n",
        "            np.random.shuffle(shuffle_index)\n",
        "            counter=0\n",
        "'''"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X4OKITXZbNle",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# https://stackoverflow.com/questions/41538692/using-sparse-matrices-with-keras-and-tensorflow\n",
        "def nn_batch_generator(X_data, y_data, batch_size):\n",
        "    samples_per_epoch = X_data.shape[0]\n",
        "    number_of_batches = samples_per_epoch/batch_size\n",
        "    counter=0\n",
        "    index = np.arange(np.shape(y_data)[0])\n",
        "    while 1:\n",
        "        index_batch = index[batch_size*counter:batch_size*(counter+1)]\n",
        "        X_batch = X_data[index_batch,:].todense()\n",
        "        y_batch = y_data[index_batch]\n",
        "        counter += 1\n",
        "        yield np.array(X_batch),y_batch\n",
        "        if (counter > number_of_batches):\n",
        "            counter=0"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qXf_rUr4aC46",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "EPOCHS = 5\n",
        "BATCH_SIZE = 128"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "apsqWs10-uJk",
        "colab_type": "code",
        "outputId": "294e35bb-41b3-43a3-aa14-c8f41bbb699a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        }
      },
      "source": [
        "# Training the Model\n",
        "history = model.fit_generator(generator=nn_batch_generator(x_train_final, y_train.values, BATCH_SIZE),\n",
        "                    epochs=EPOCHS, validation_data =nn_batch_generator(x_val_final, y_val.values, BATCH_SIZE),\n",
        "                    steps_per_epoch=x_train_final.shape[0]/BATCH_SIZE, validation_steps=x_val_final.shape[0]/BATCH_SIZE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From <ipython-input-100-85c441c7f0b7>:3: Model.fit_generator (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Please use Model.fit, which supports generators.\n",
            "Epoch 1/5\n",
            "9266/9265 [==============================] - 925s 100ms/step - loss: 0.2718 - mae: 0.3878 - mse: 0.2718 - val_loss: 0.2310 - val_mae: 0.3565 - val_mse: 0.2310\n",
            "Epoch 2/5\n",
            "9266/9265 [==============================] - 899s 97ms/step - loss: 0.2107 - mae: 0.3400 - mse: 0.2107 - val_loss: 0.2294 - val_mae: 0.3594 - val_mse: 0.2294\n",
            "Epoch 3/5\n",
            "9266/9265 [==============================] - 890s 96ms/step - loss: 0.1935 - mae: 0.3229 - mse: 0.1935 - val_loss: 0.2218 - val_mae: 0.3511 - val_mse: 0.2218\n",
            "Epoch 4/5\n",
            "9266/9265 [==============================] - 892s 96ms/step - loss: 0.1802 - mae: 0.3098 - mse: 0.1802 - val_loss: 0.2177 - val_mae: 0.3447 - val_mse: 0.2177\n",
            "Epoch 5/5\n",
            "9266/9265 [==============================] - 874s 94ms/step - loss: 0.1709 - mae: 0.3002 - mse: 0.1709 - val_loss: 0.2204 - val_mae: 0.3466 - val_mse: 0.2204\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WeHnOK5JLBJs",
        "colab_type": "code",
        "outputId": "f43b0db0-8dd5-4d50-bfee-5603a3a0d425",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "source": [
        "# Reference https://keras.io/visualization/\n",
        "\n",
        "# Plot training & validation loss values\n",
        "\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('Model Loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vv3vHY9zLRGF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "rpkAmFNl83Mi",
        "outputId": "b9d98407-eca9-4a44-8f76-5c48ac0b8f55",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Train Data\n",
        "train_pred = model.predict(x_train_final)\n",
        "mlp_train_RMSLE = np.sqrt(mean_squared_error(y_train, train_pred))\n",
        "print(\"Train RMSLE: \", mlp_train_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train RMSLE:  0.39874828766074355\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "9dnAMmKs83Ml",
        "outputId": "d49588b7-2f8e-4328-e7c3-c840092eda82",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Validation data\n",
        "val_pred = model.predict(x_val_final)\n",
        "mlp_val_RMSLE = np.sqrt(mean_squared_error(y_val, val_pred))\n",
        "print(\"Train RMSLE: \", mlp_val_RMSLE)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train RMSLE:  0.46947987528516916\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "0Bg7aVYB83Mo",
        "outputId": "63b18b7e-a3eb-4b72-fbf6-ca044e526f60",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Predictions on Test data\n",
        "test_pred_MLP = model.predict(x_test_final)\n",
        "test_pred_MLP = test_pred_MLP.flatten()\n",
        "test_pred_MLP.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(693359,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zn2I1CJt8vcZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7n6czsQY8vUV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vj0FgXsiOjGy",
        "colab_type": "text"
      },
      "source": [
        "# Ensemble"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qQFLV3MlIPM7",
        "colab_type": "code",
        "outputId": "9bdbdce9-cef2-4743-d600-b3856dd5b474",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Not using XGBRegressor predictions for Ensembling. \n",
        "# Using weighted ensemble by giving some weight values\n",
        "\n",
        "final = (test_pred_sgd * 0.2 + test_pred_ridge * 0.3 + test_pred_LGBM * 0.1 + test_pred_MLP * 0.4)  # giving more weight to the MLP model\n",
        "final.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(693359,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EX6TDqcYIPKT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4mKCagU2IPIa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Making submission file\n",
        "\n",
        "test_id = test_ids\n",
        "\n",
        "submission = pd.DataFrame({\n",
        "        'test_id': test_id,\n",
        "        'price': final\n",
        "        })"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RYgeyWwhIPC1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "submission.to_csv(\"/content/drive/My Drive/Mercari/new_submission_1.csv\", index=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UexWLqQkP1sw",
        "colab_type": "text"
      },
      "source": [
        "# Conclusion"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8CMaFeF-IO9K",
        "colab_type": "code",
        "outputId": "9ded54b9-5e82-4384-bf2d-1c3f1e540e90",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "x = PrettyTable()  \n",
        "\n",
        "x. field_names = ['Model', 'Train RMSLE', 'Validation RMSLE']\n",
        "\n",
        "x.add_row(['SGDRegressor', round(sgd_train_RMSLE, 2), round(sgd_val_RMSLE, 2)])\n",
        "x.add_row(['Ridge', round(ridge_train_RMSLE, 2), round(ridge_val_RMSLE, 2)])\n",
        "x.add_row(['XGBRegressor', round(xgb_train_RMSLE, 2), round(xgb_val_RMSLE, 2)])\n",
        "x.add_row(['LGBMRegressor', round(lgbm_train_RMSLE, 2), round(lgbm_val_RMSLE, 2)])\n",
        "x.add_row(['Multilayer Perceptron', round(mlp_train_RMSLE, 2), round(mlp_val_RMSLE, 2)])\n",
        "\n",
        "print(x)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+-----------------------+-------------+------------------+\n",
            "|         Model         | Train RMSLE | Validation RMSLE |\n",
            "+-----------------------+-------------+------------------+\n",
            "|      SGDRegressor     |     0.51    |       0.52       |\n",
            "|         Ridge         |     0.50    |       0.51       |\n",
            "|      XGBRegressor     |     0.61    |       0.61       |\n",
            "|     LGBMRegressor     |     0.54    |       0.54       |\n",
            "| Multilayer Perceptron |     0.39    |       0.46       |\n",
            "+-----------------------+-------------+------------------+\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}